package com.wgx.demo;

/**
 * @Author EdmanWang
 * @create 2020/2/4 17:24
 *
 * 1: Synchronized 出现原因的前因
 *    在高并发场景下，多个线程对同一资源【临界资源】进行访问的时候，会引起并发问题。
 *    如果临界资源是变量的话，在使用volatile关键字进行修饰的时候，在高并发的情况下
 *    会出现总线爆炸的问题，总线爆炸：指的是在高并发的情况下，临界资源的读写操作
 *    不断经过总线嗅探机制来保证资源的可见性的时候会导致总线负荷过大，出现总线爆炸问题。
 *
 *  2：Synchronized关键字底层的原理
 *     Synchronized是一种jvm内置锁，它是基于对象内部的【monitor】监视器锁，用Synchronized
 *     关键字修改的代码块，在jit编译的时候，会翻译成monitor_enter 和monitor_exit 两个jvm指令
 *     这两个指令控制着同步代码块的进入和退出。而对象的monitor【监视器锁】是基于底层操作系统
 *     的互斥锁【mutex_lock】来实现的。
 *
 *  3：Synchronized的应用
 *     1：作用在类方法上    锁 ----> 是对象
 *     2：作用在实例方法上  锁 ----> 是this
 *     3：作用在代码块上    锁 ----> 是对象
 *
 *  4：Synchronized锁对象的膨胀升级
 *     对象在刚开始的时候，是无锁的
 *     锁的膨胀升级过程
 *     无锁----> 偏向锁 ----> 轻量级锁 -----> 自旋锁 -----> 重量级锁
 *     锁消除， 锁粗化
 *
 *     4.1：锁的膨胀升级过程中涉及到对象结构中对象头的结构转换
 *          1：对象的内存结构
 *              对象头  【mark word , meteDate】
 *                       mark word 【1：对象的hash值 2：锁的状态 3：偏向锁id和偏向时间 4: 对象的分代年龄 .....】
 *                       meteDate  存储的是对象元数据信息 如果是数组对象的话，还记录一个数组长度
 *              实例数据
 *                      实例数据存储的是对象的属性和方法等......
 *              对齐填充
 *                      一个对象占据的空间必须是8的整数倍
 *
 *
 *
 */
public class SynchronizedDemo {
}
